name: machine-learning-environment

services:
  postgresql:
    image: bitnami/postgresql:latest
    container_name: postgresql
    hostname: postgresql
    environment:
      POSTGRESQL_DATABASE: mlflow
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME:?err}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD:?err}
    restart: unless-stopped
    volumes:
      - postgresql:/bitnami/postgresql
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "mlflow", "-U", "${POSTGRESQL_USERNAME:?err}" ]
      interval: 5s
      timeout: 5s
      retries: 3

  minio:
    image: bitnami/minio:latest
    container_name: minio
    hostname: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:?err}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:?err}
      MINIO_DEFAULT_BUCKETS: mlflow
    restart: unless-stopped
    volumes:
      - minio:/bitnami/minio
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 5s
      retries: 3

  tensorboard:
    image: tornermarton/tensorboard:latest
    container_name: tensorboard
    hostname: tensorboard
    environment:
      LOGDIR: s3://mlflow/mlflow
      S3_ENDPOINT: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:?err}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:?err}
    restart: unless-stopped
    depends_on:
      minio:
        condition: service_healthy
    ports:
      - target: 6006
        published: 8090
        host_ip: 127.0.0.1
        protocol: tcp
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:6006" ]
      interval: 5s
      timeout: 5s
      retries: 3

  mlflow:
    image: tornermarton/mlflow:latest
    container_name: mlflow
    hostname: mlflow
#    command: ["db", "upgrade", "postgresql://${POSTGRESQL_USERNAME:?err}:${POSTGRESQL_PASSWORD:?err}@postgresql:5432/mlflow"]
    environment:
      MLFLOW_HOST: 0.0.0.0
      MLFLOW_BACKEND_STORE_URI: postgresql://${POSTGRESQL_USERNAME:?err}:${POSTGRESQL_PASSWORD:?err}@postgresql:5432/mlflow
      MLFLOW_ARTIFACTS_DESTINATION: s3://mlflow/mlflow
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:?err}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:?err}
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - target: 5000
        published: 8889
        host_ip: 127.0.0.1
        protocol: tcp
    networks:
      - default
      - jupyterhub
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000" ]
      interval: 5s
      timeout: 5s
      retries: 3

  jupyterhub:
    image: tornermarton/jupyterhub:latest
    container_name: jupyterhub
    hostname: jupyterhub
    environment:
      # MLFlow configuration
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MLFLOW_TRACKING_USERNAME: "{username}"
      MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING: true
      MLFLOW_SYSTEM_METRICS_SAMPLING_INTERVAL: 5
      MLFLOW_SYSTEM_METRICS_SAMPLES_BEFORE_LOGGING: 1
      # Spawner configuration
      DOCKER_ALLOWED_IMAGES: tornermarton/base-notebook:latest,tornermarton/pytorch-notebook:latest,tornermarton/pytorch-notebook:cuda12-latest
      DOCKER_NETWORK_NAME: machine-learning-environment_jupyterhub
      DOCKER_ENVIRONMENT: MLFLOW_TRACKING_URI,MLFLOW_TRACKING_USERNAME,MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING,MLFLOW_SYSTEM_METRICS_SAMPLING_INTERVAL,MLFLOW_SYSTEM_METRICS_SAMPLES_BEFORE_LOGGING
    restart: unless-stopped
    ports:
      - target: 8888
        published: 8888
        host_ip: 127.0.0.1
        protocol: tcp
    networks:
      - default
      - jupyterhub
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - jupyterhub-data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888" ]
      interval: 5s
      timeout: 5s
      retries: 3

networks:
  jupyterhub:

volumes:
  postgresql:
  minio:
  jupyterhub-data:
